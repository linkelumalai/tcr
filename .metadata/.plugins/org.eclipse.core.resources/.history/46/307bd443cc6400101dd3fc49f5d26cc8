package learn.predefinedutilsfunction;

import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.BinaryOperator;

public class BiFunctionalDemo {

	public static void main(String[] args) {

		BiPredicate<Integer, Integer> isEvenSumOfNumbers = (num1, num2) -> (num1 + num2) % 2 == 0;
		System.out.println(isEvenSumOfNumbers.test(20, 1));// false

		BiFunction<Double, Double, Double> powerofNumber = (num1, num2) -> Math.pow(num1, num2);
		System.out.println(powerofNumber.apply(2.00, 8.00));

		BiConsumer<String, String> appendAndConvert = (word1, word2) -> System.out
				.println((word1 + " " + word2).toUpperCase());

		appendAndConvert.accept("lucky", "Leo");

		BiConsumer<String, String> appendAndLength = (word1, word2) -> System.out.println((word1 + word2).length());
		appendAndLength.accept("lucky", "leo");

		// BinaryOperator it has 2 static method is minBy and maxBy
		BinaryOperator<Double> powerofNumberWithBo = (num1, num2) -> Math.pow(num1, num2);
		System.out.println(powerofNumber.apply(2.00, 8.00));

		BinaryOperator<Integer> maxOperator = BinaryOperator.maxBy((a, b) -> Integer.compare(a, b));
		System.out.println(maxOperator.apply(20, 40));

		BinaryOperator<Integer> minOperator = BinaryOperator.minBy((a, b) -> Integer.compare(a, b));
		System.out.println(minOperator.apply(20, 40));
	}
}
